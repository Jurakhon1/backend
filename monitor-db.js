const mysql = require('mysql2/promise');

class DatabaseMonitor {
  constructor() {
    this.config = {
      host: process.env.DB_HOST || '147.45.157.26',
      port: parseInt(process.env.DB_PORT || '3306'),
      user: process.env.DB_USERNAME || 'gen_user',
      password: process.env.DB_PASSWORD || '4rX&cHtw:uy&,l',
      database: process.env.DB_DATABASE || 'phone_store_db',
      charset: 'utf8mb4',
      timezone: '+00:00',
    };
    this.isMonitoring = false;
    this.connection = null;
  }

  async startMonitoring() {
    console.log('üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    this.isMonitoring = true;

    while (this.isMonitoring) {
      try {
        await this.checkDatabaseHealth();
        await this.sleep(30000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error.message);
        await this.sleep(10000); // –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 10 —Å–µ–∫—É–Ω–¥
      }
    }
  }

  async checkDatabaseHealth() {
    try {
      if (!this.connection) {
        this.connection = await mysql.createConnection(this.config);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      await this.connection.ping();

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      const [connections] = await this.connection.execute(
        'SHOW STATUS LIKE "Threads_connected"',
      );
      const [maxConnections] = await this.connection.execute(
        'SHOW VARIABLES LIKE "max_connections"',
      );

      const currentConnections = parseInt(connections[0].Value);
      const maxConn = parseInt(maxConnections[0].Value);
      const connectionUsage = ((currentConnections / maxConn) * 100).toFixed(2);

      console.log(
        `üìä –°—Ç–∞—Ç—É—Å –ë–î: ${currentConnections}/${maxConn} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (${connectionUsage}%)`,
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
      if (connectionUsage > 80) {
        console.warn(
          `‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${connectionUsage}%`,
        );
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ª–≥–∏–µ –∑–∞–ø—Ä–æ—Å—ã
      const [longQueries] = await this.connection.execute(`
        SELECT COUNT(*) as count 
        FROM information_schema.processlist 
        WHERE time > 30 AND command != 'Sleep'
      `);

      if (longQueries[0].count > 0) {
        console.warn(
          `‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${longQueries[0].count} –¥–æ–ª–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (>30 —Å–µ–∫)`,
        );
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
      const [locks] = await this.connection.execute(`
        SELECT COUNT(*) as count 
        FROM information_schema.innodb_trx 
        WHERE trx_state = 'LOCK WAIT'
      `);

      if (locks[0].count > 0) {
        console.warn(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ ${locks[0].count} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î:', error.message);
      this.connection = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      throw error;
    }
  }

  async stopMonitoring() {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
    this.isMonitoring = false;
    if (this.connection) {
      await this.connection.end();
      this.connection = null;
    }
  }

  sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
}

// –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const monitor = new DatabaseMonitor();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...');
  await monitor.stopMonitoring();
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...');
  await monitor.stopMonitoring();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫
monitor.startMonitoring().catch(console.error);
