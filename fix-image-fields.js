const mysql = require('mysql2/promise');

async function fixImageFields() {
  let connection;

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    connection = await mysql.createConnection({
      host: 'localhost',
      user: 'root',
      password: '', // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
      database: 'mobile_store',
    });

    console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã...');
    const [columns] = await connection.execute('DESCRIBE product_color_images');

    console.log('–¢–µ–∫—É—â–∏–µ —Ç–∏–ø—ã –ø–æ–ª–µ–π:');
    columns.forEach((col) => {
      if (col.Field === 'primary_image_url' || col.Field === 'thumbnail_url') {
        console.log(`  ${col.Field}: ${col.Type}`);
      }
    });

    // –ò–∑–º–µ–Ω—è–µ–º —Ç–∏–ø –ø–æ–ª–µ–π
    console.log('üîß –ò–∑–º–µ–Ω—è–µ–º —Ç–∏–ø –ø–æ–ª–µ–π —Å VARCHAR(500) –Ω–∞ TEXT...');

    await connection.execute(`
      ALTER TABLE product_color_images 
      MODIFY COLUMN primary_image_url TEXT NOT NULL
    `);
    console.log('‚úÖ primary_image_url –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ TEXT');

    await connection.execute(`
      ALTER TABLE product_color_images 
      MODIFY COLUMN thumbnail_url TEXT NULL
    `);
    console.log('‚úÖ thumbnail_url –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ TEXT');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã...');
    const [updatedColumns] = await connection.execute(
      'DESCRIBE product_color_images',
    );

    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–ª–µ–π:');
    updatedColumns.forEach((col) => {
      if (col.Field === 'primary_image_url' || col.Field === 'thumbnail_url') {
        console.log(`  ${col.Field}: ${col.Type}`);
      }
    });

    console.log('üéâ –ü–æ–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞ TEXT!');
    console.log(
      '–¢–µ–ø–µ—Ä—å base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –æ–±—Ä–µ–∑–∞—Ç—å—Å—è –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤.',
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª–µ–π:', error.message);
    throw error;
  } finally {
    if (connection) {
      await connection.end();
      console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
fixImageFields()
  .then(() => {
    console.log('‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞:', error);
    process.exit(1);
  });
