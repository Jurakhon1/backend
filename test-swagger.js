const axios = require('axios');

async function testSwagger() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Swagger –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...');
    const response = await axios.get('http://localhost:3000/api');
    console.log('‚úÖ Swagger –¥–æ—Å—Ç—É–ø–µ–Ω:', response.status);

    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –Ω–∞—à–∏ –Ω–æ–≤—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    if (response.data.includes('colors-fast')) {
      console.log('‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç colors-fast –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏');
    } else {
      console.log('‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç colors-fast –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏');
    }

    if (response.data.includes('color/:colorId/images')) {
      console.log('‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç color/:colorId/images –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏');
    } else {
      console.log('‚ùå –≠–Ω–¥–ø–æ–∏–Ω—Ç color/:colorId/images –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏');
    }
  } catch (error) {
    console.log('‚ùå Swagger –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }
}

testSwagger();
