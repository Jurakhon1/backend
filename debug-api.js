const axios = require('axios');

async function debugAPI() {
  try {
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ API...\n');

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
    console.log('üì± –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...');
    const products = await axios.get('http://localhost:3000/products');
    console.log('‚úÖ –ü—Ä–æ–¥—É–∫—Ç—ã:', products.data.length, '—à—Ç.');

    if (products.data.length > 0) {
      const product = products.data[0];
      console.log('  - ID:', product.id);
      console.log('  - –ù–∞–∑–≤–∞–Ω–∏–µ:', product.name?.ru || product.name_ru);

      // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã —É –ø—Ä–æ–¥—É–∫—Ç–∞
      console.log('\nüé® –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞...');
      if (product.variants && product.variants.length > 0) {
        console.log('‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:', product.variants.length);
        product.variants.forEach((variant, i) => {
          console.log(
            `  - ${i + 1}. ${variant.variantName?.ru || variant.variantNameRu} (${variant.variantType})`,
          );
        });
      } else {
        console.log('‚ùå –í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }

      // –¢–µ—Å—Ç 3: –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞—à –Ω–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
      console.log('\nüöÄ –¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...');
      try {
        const colors = await axios.get(
          `http://localhost:3000/products/${product.id}/colors-fast`,
        );
        console.log('‚úÖ –≠–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!');
        console.log('  - –¶–≤–µ—Ç–∞:', colors.data.colors?.length || 0);
      } catch (error) {
        console.log(
          '‚ùå –û—à–∏–±–∫–∞ –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–µ:',
          error.response?.data || error.message,
        );
      }
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

debugAPI();
