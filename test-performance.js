const mysql = require('mysql2/promise');

class PerformanceTester {
  constructor() {
    this.config = {
      host: process.env.DB_HOST || '147.45.157.26',
      port: parseInt(process.env.DB_PORT || '3306'),
      user: process.env.DB_USERNAME || 'gen_user',
      password: process.env.DB_PASSWORD || '4rX&cHtw:uy&,l',
      database: process.env.DB_DATABASE || 'phone_store_db',
      charset: 'utf8mb4',
      timezone: '+00:00',
    };
  }

  async runTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n');

    try {
      // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      await this.testConnection();

      // –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      await this.testSimpleQueries();

      // –¢–µ—Å—Ç 3: –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å JOIN
      await this.testComplexQueries();

      // –¢–µ—Å—Ç 4: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      await this.testTransactions();

      // –¢–µ—Å—Ç 5: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
      await this.testConcurrentQueries();

      // –¢–µ—Å—Ç 6: –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
      await this.testLoad();

      console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    } catch (error) {
      console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö:', error.message);
      throw error;
    }
  }

  async testConnection() {
    console.log('üîå –¢–µ—Å—Ç 1: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const start = Date.now();

    const connection = await mysql.createConnection(this.config);
    await connection.ping();
    await connection.end();

    const duration = Date.now() - start;
    console.log(`   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞ ${duration}ms\n`);
  }

  async testSimpleQueries() {
    console.log('üìä –¢–µ—Å—Ç 2: –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã...');
    const connection = await mysql.createConnection(this.config);

    try {
      const queries = [
        'SELECT 1 as test',
        'SELECT COUNT(*) as count FROM products',
        'SELECT COUNT(*) as count FROM users',
        'SELECT COUNT(*) as count FROM orders',
        'SHOW STATUS LIKE "Threads_connected"',
      ];

      for (const query of queries) {
        const start = Date.now();
        const [rows] = await connection.execute(query);
        const duration = Date.now() - start;
        console.log(`   ‚úÖ ${query}: ${duration}ms`);
      }
    } finally {
      await connection.end();
    }

    console.log('');
  }

  async testComplexQueries() {
    console.log('üîó –¢–µ—Å—Ç 3: –°–ª–æ–∂–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å JOIN...');
    const connection = await mysql.createConnection(this.config);

    try {
      const queries = [
        `SELECT p.id, p.name_ru, c.name_ru as category_name, b.name as brand_name
         FROM products p
         LEFT JOIN categories c ON p.category_id = c.id
         LEFT JOIN brands b ON p.brand_id = b.id
         LIMIT 10`,
        `SELECT o.id, o.order_number, u.email, COUNT(oi.id) as items_count
         FROM orders o
         LEFT JOIN users u ON o.user_id = u.id
         LEFT JOIN order_items oi ON o.id = oi.order_id
         GROUP BY o.id
         LIMIT 10`,
      ];

      for (const query of queries) {
        const start = Date.now();
        const [rows] = await connection.execute(query);
        const duration = Date.now() - start;
        console.log(
          `   ‚úÖ –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å: ${duration}ms (${rows.length} —Å—Ç—Ä–æ–∫)`,
        );
      }
    } finally {
      await connection.end();
    }

    console.log('');
  }

  async testTransactions() {
    console.log('üîÑ –¢–µ—Å—Ç 4: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...');
    const connection = await mysql.createConnection(this.config);

    try {
      await connection.beginTransaction();

      const start = Date.now();

      // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
      await connection.execute('SELECT COUNT(*) FROM products WHERE id = 1');
      await connection.execute('SELECT COUNT(*) FROM users WHERE id = 1');
      await connection.execute(
        'INSERT INTO orders (order_number, user_id, status, total_amount) VALUES (?, ?, ?, ?)',
        ['TEST' + Date.now(), 1, 'PENDING_PAYMENT', 1000],
      );

      await connection.rollback(); // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é

      const duration = Date.now() - start;
      console.log(`   ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ ${duration}ms\n`);
    } finally {
      await connection.end();
    }
  }

  async testConcurrentQueries() {
    console.log('‚ö° –¢–µ—Å—Ç 5: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã...');

    const promises = [];
    const start = Date.now();

    // –°–æ–∑–¥–∞–µ–º 10 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    for (let i = 0; i < 10; i++) {
      promises.push(this.runConcurrentQuery(i));
    }

    await Promise.all(promises);

    const duration = Date.now() - start;
    console.log(`   ‚úÖ 10 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∑–∞ ${duration}ms\n`);
  }

  async runConcurrentQuery(id) {
    const connection = await mysql.createConnection(this.config);

    try {
      const start = Date.now();
      const [rows] = await connection.execute(
        'SELECT COUNT(*) as count FROM products',
      );
      const duration = Date.now() - start;
      console.log(`   üìä –ó–∞–ø—Ä–æ—Å ${id + 1}: ${duration}ms`);
      return rows;
    } finally {
      await connection.end();
    }
  }

  async testLoad() {
    console.log('üî• –¢–µ—Å—Ç 6: –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...');

    const iterations = 50;
    const start = Date.now();
    const results = [];

    for (let i = 0; i < iterations; i++) {
      const queryStart = Date.now();
      const connection = await mysql.createConnection(this.config);

      try {
        await connection.execute('SELECT COUNT(*) as count FROM products');
        const queryDuration = Date.now() - queryStart;
        results.push(queryDuration);

        if (i % 10 === 0) {
          console.log(`   üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ ${i + 1}/${iterations} –∑–∞–ø—Ä–æ—Å–æ–≤...`);
        }
      } finally {
        await connection.end();
      }
    }

    const totalDuration = Date.now() - start;
    const avgDuration = results.reduce((a, b) => a + b, 0) / results.length;
    const minDuration = Math.min(...results);
    const maxDuration = Math.max(...results);

    console.log(`   ‚úÖ –ù–∞–≥—Ä—É–∑–æ—á–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω:`);
    console.log(`      üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${iterations}`);
    console.log(`      ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalDuration}ms`);
    console.log(`      üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${avgDuration.toFixed(2)}ms`);
    console.log(`      üèÉ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${minDuration}ms`);
    console.log(`      üêå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${maxDuration}ms`);
    console.log(
      `      üöÄ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: ${(iterations / (totalDuration / 1000)).toFixed(2)}\n`,
    );
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
const tester = new PerformanceTester();
tester.runTests().catch(console.error);
