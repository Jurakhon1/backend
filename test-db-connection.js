const mysql = require('mysql2/promise');

async function testDatabaseConnection() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

  const config = {
    host: process.env.DB_HOST || '147.45.157.26',
    port: parseInt(process.env.DB_PORT || '3306'),
    user: process.env.DB_USERNAME || 'gen_user',
    password: process.env.DB_PASSWORD || '4rX&cHtw:uy&,l',
    database: process.env.DB_DATABASE || 'phone_store_db',
    charset: 'utf8mb4',
    timezone: '+00:00',
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    connectionLimit: 10,
    acquireTimeout: 60000,
    timeout: 60000,
    reconnect: true,
    idleTimeout: 300000,
    keepAliveInitialDelay: 0,
    enableKeepAlive: true,
  };

  console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
  console.log(`   Host: ${config.host}`);
  console.log(`   Port: ${config.port}`);
  console.log(`   Database: ${config.database}`);
  console.log(`   User: ${config.user}`);
  console.log(`   Connection Limit: ${config.connectionLimit}`);
  console.log(`   Timeout: ${config.timeout}ms`);
  console.log(`   Acquire Timeout: ${config.acquireTimeout}ms`);

  let connection;
  try {
    console.log('\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    connection = await mysql.createConnection(config);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞...');
    const [rows] = await connection.execute('SELECT 1 as test');
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ:', rows);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    console.log('\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...');
    const [status] = await connection.execute(
      'SHOW STATUS LIKE "Threads_connected"',
    );
    console.log('üìä –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:', status);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ MySQL
    console.log('\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö MySQL...');
    const [variables] = await connection.execute(`
      SHOW VARIABLES WHERE Variable_name IN (
        'max_connections',
        'wait_timeout',
        'interactive_timeout',
        'connect_timeout',
        'net_read_timeout',
        'net_write_timeout'
      )
    `);
    console.log('üìä –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ MySQL:');
    variables.forEach((v) => {
      console.log(`   ${v.Variable_name}: ${v.Value}`);
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:');
    console.error('   –ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code);
    console.error('   –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message);
    console.error('   SQL State:', error.sqlState);
    console.error('   Errno:', error.errno);

    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   - –°–µ—Ä–≤–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      console.log('   - –ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ—Å—Ç –∏–ª–∏ –ø–æ—Ä—Ç');
      console.log('   - –§–∞–π—Ä–≤–æ–ª –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    } else if (error.code === 'ER_ACCESS_DENIED_ERROR') {
      console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   - –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      console.log('   - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞');
    } else if (error.code === 'ER_BAD_DB_ERROR') {
      console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('   - –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
    } else if (
      error.code === 'PROTOCOL_CONNECTION_LOST' ||
      error.message.includes('Connection lost')
    ) {
      console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   - –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º');
      console.log('   - –ü—Ä–µ–≤—ã—à–µ–Ω wait_timeout');
      console.log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é');
    }
  } finally {
    if (connection) {
      await connection.end();
      console.log('\nüîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
async function testConnectionPool() {
  console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...');

  const config = {
    host: process.env.DB_HOST || '147.45.157.26',
    port: parseInt(process.env.DB_PORT || '3306'),
    user: process.env.DB_USERNAME || 'gen_user',
    password: process.env.DB_PASSWORD || '4rX&cHtw:uy&,l',
    database: process.env.DB_DATABASE || 'phone_store_db',
    charset: 'utf8mb4',
    timezone: '+00:00',
    connectionLimit: 5, // –ú–µ–Ω—å—à–∏–π –ª–∏–º–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∞
    acquireTimeout: 10000,
    timeout: 10000,
    reconnect: true,
    idleTimeout: 300000,
  };

  const pool = mysql.createPool(config);

  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    const promises = [];
    for (let i = 0; i < 3; i++) {
      promises.push(
        pool
          .execute('SELECT ? as test_id, NOW() as timestamp', [i])
          .then(([rows]) => {
            console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å ${i} –≤—ã–ø–æ–ª–Ω–µ–Ω:`, rows[0]);
            return rows[0];
          })
          .catch((error) => {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ ${i}:`, error.message);
            throw error;
          }),
      );
    }

    await Promise.all(promises);
    console.log('‚úÖ –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—É–ª–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:', error.message);
  } finally {
    await pool.end();
    console.log('üîå –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç');
  }
}

async function main() {
  await testDatabaseConnection();
  await testConnectionPool();
}

main().catch(console.error);
